
@inherits UmbracoViewPage<dynamic>
@using Newtonsoft.Json.Linq

@if (Model != null && Model.sections != null)
{
  var oneColumn = ((System.Collections.ICollection)Model.sections).Count == 1;

  if (oneColumn)
  {
    foreach (var section in Model.sections)
    {
      foreach (var row in section.rows)
      {
        @renderRow(row, true);
      }
    }
  }
  else
  {
    <div class="container">
      <div class="row">
        @foreach (var s in Model.sections)
        {
          <div class="col-md-@s.grid column">
            @foreach (var row in s.rows)
            {
              @renderRow(row, false);
            }
          </div>
        }
      </div>
    </div>
  }
}

@helper renderRow(dynamic row, bool singleColumn)
{
  if (row.name == "5 Column Card")
  {
    <div class="container">
      <div class="card-deck">
        @foreach (var area in row.areas)
        {
          foreach (var control in area.controls)
          {
            if (control != null && control.editor != null && control.editor.view != null)
            {
              <text>@Html.Partial("grid/editors/base", (object)control)</text>
            }
          }
        }
      </div>
    </div>
  }
  else if (row.name == "Hero Image" || row.name == "Hero Video")
  {
    <div @RenderElementAttributes(row)>
      @foreach (var area in row.areas)
      {
        foreach (var control in area.controls)
        {
          if (control != null && control.editor != null && control.editor.view != null)
          {
            <text>@Html.Partial("grid/editors/base", (object)control)</text>
          }
        }
      }
    </div>
  }
  else if (row.name == "Main Content")
  {
    <div @RenderElementAttributes(row) class="main-content">
      @Html.If(singleColumn, "<div class='container'>")
      <div class="row">
        @foreach (var area in row.areas)
        {
          <div class="col-md-@area.grid">
            <div @RenderElementAttributes(area)>
              @foreach (var control in area.controls)
              {
                if (control != null && control.editor != null && control.editor.view != null)
                {
                  <text>@Html.Partial("grid/editors/base", (object)control)</text>
                }
              }
            </div>
          </div>}
      </div>
      @Html.If(singleColumn, "</div>")
    </div>
  }
  else if (row.name == "Event Teaser")
  {
    <div class="container">
      <div class="row mb-4">
        @{var i = 1;}
        @foreach (var area in row.areas)
        {
          <div class="col-md-@area.grid @(i == 2 ? " d-flex flex-column align-content-center justify-content-center mt-4 mt-md-0" : "")">
            @foreach (var control in area.controls)
            {
              if (control != null && control.editor != null && control.editor.view != null)
              {
                <text>@Html.Partial("grid/editors/base", (object)control)</text>
              }


            }
          </div>
          i++;
        }
      </div>
    </div>
  }
  else if (row.name == "Event CTA")
  {
    <div class="container">
      <div class="row mb-4">
        @{var i = 1;}
        @foreach (var area in row.areas)
        {
          <div class="col-md-@area.grid @(i == 1 ? "offset-md-1" : "")">
            @foreach (var control in area.controls)
            {
              if (control != null && control.editor != null && control.editor.view != null)
              {
                <text>@Html.Partial("grid/editors/base", (object)control)</text>
              }
            }
          </div>
          i++;
        }
      </div>
    </div>
  }
  else if (row.name == "Central Column Content")
  {
    <div class="container">
      <div class="row">
        @foreach (var area in row.areas)
        {
          <div class="col-md-8 m-auto">
            @foreach (var control in area.controls)
            {
              if (control != null && control.editor != null && control.editor.view != null)
              {
                <text>@Html.Partial("grid/editors/base", (object)control)</text>
              }
            }
          </div>
        }
      </div>
    </div>
  }
  else if (row.name == "Code Snippet")
  {
    <div class="container">
      <div class="row">
        @foreach (var area in row.areas)
        {
        <div class="col-12">
          @foreach (var control in area.controls)
          {
            if (control != null && control.editor != null && control.editor.view != null)
            {
              
              <text>@Html.Partial("grid/editors/base", (object)control)</text>
            }
          }
        </div>
        }
      </div>
    </div>
  }
  else
  {
    <div @RenderElementAttributes(row)>
      @Html.If(singleColumn, "<div class='container'>")
      <div class="row">
        @foreach (var area in row.areas)
        {
          <div class="col-md-@area.grid">
            <div @RenderElementAttributes(area)>
              @foreach (var control in area.controls)
              {
                if (control != null && control.editor != null && control.editor.view != null)
                {
                  <text>@Html.Partial("grid/editors/base", (object)control)</text>
                }
              }
            </div>
          </div>}
      </div>
      @Html.If(singleColumn, "</div>")
    </div>
  }
}

@functions {
  public static MvcHtmlString RenderElementAttributes(dynamic contentItem)
  {
    var attrs = new List<string>();
    JObject cfg = contentItem.config;

    if (cfg != null)
      foreach (JProperty property in cfg.Properties())
      {
        var propertyValue = HttpUtility.HtmlAttributeEncode(property.Value.ToString());
        attrs.Add(property.Name + "=\"" + propertyValue + "\"");
      }

    JObject style = contentItem.styles;

    if (style != null)
    {
      var cssVals = new List<string>();
      foreach (JProperty property in style.Properties())
      {
        var propertyValue = property.Value.ToString();
        if (string.IsNullOrWhiteSpace(propertyValue) == false)
        {
          cssVals.Add(property.Name + ":" + propertyValue + ";");
        }
      }

      if (cssVals.Any())
        attrs.Add("style=\"" + HttpUtility.HtmlAttributeEncode(string.Join(" ", cssVals)) + "\"");
    }

    return new MvcHtmlString(string.Join(" ", attrs));
  }
}
